/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SwipeService } from "../swipe.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SwipeCreateInput } from "./SwipeCreateInput";
import { Swipe } from "./Swipe";
import { SwipeFindManyArgs } from "./SwipeFindManyArgs";
import { SwipeWhereUniqueInput } from "./SwipeWhereUniqueInput";
import { SwipeUpdateInput } from "./SwipeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SwipeControllerBase {
  constructor(
    protected readonly service: SwipeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Swipe })
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSwipe(@common.Body() data: SwipeCreateInput): Promise<Swipe> {
    return await this.service.createSwipe({
      data: {
        ...data,

        userProfile: data.userProfile
          ? {
              connect: data.userProfile,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        direction: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Swipe] })
  @ApiNestedQuery(SwipeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async swipes(@common.Req() request: Request): Promise<Swipe[]> {
    const args = plainToClass(SwipeFindManyArgs, request.query);
    return this.service.swipes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        direction: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Swipe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async swipe(
    @common.Param() params: SwipeWhereUniqueInput
  ): Promise<Swipe | null> {
    const result = await this.service.swipe({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        direction: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Swipe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSwipe(
    @common.Param() params: SwipeWhereUniqueInput,
    @common.Body() data: SwipeUpdateInput
  ): Promise<Swipe | null> {
    try {
      return await this.service.updateSwipe({
        where: params,
        data: {
          ...data,

          userProfile: data.userProfile
            ? {
                connect: data.userProfile,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          direction: true,

          userProfile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Swipe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSwipe(
    @common.Param() params: SwipeWhereUniqueInput
  ): Promise<Swipe | null> {
    try {
      return await this.service.deleteSwipe({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          direction: true,

          userProfile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/swipe/details")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetSwipeDetails(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetSwipeDetails(body);
  }
}
