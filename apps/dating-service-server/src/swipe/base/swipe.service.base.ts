/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Swipe as PrismaSwipe,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class SwipeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SwipeCountArgs, "select">): Promise<number> {
    return this.prisma.swipe.count(args);
  }

  async swipes(args: Prisma.SwipeFindManyArgs): Promise<PrismaSwipe[]> {
    return this.prisma.swipe.findMany(args);
  }
  async swipe(args: Prisma.SwipeFindUniqueArgs): Promise<PrismaSwipe | null> {
    return this.prisma.swipe.findUnique(args);
  }
  async createSwipe(args: Prisma.SwipeCreateArgs): Promise<PrismaSwipe> {
    return this.prisma.swipe.create(args);
  }
  async updateSwipe(args: Prisma.SwipeUpdateArgs): Promise<PrismaSwipe> {
    return this.prisma.swipe.update(args);
  }
  async deleteSwipe(args: Prisma.SwipeDeleteArgs): Promise<PrismaSwipe> {
    return this.prisma.swipe.delete(args);
  }

  async getUserProfile(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.swipe
      .findUnique({
        where: { id: parentId },
      })
      .userProfile();
  }
  async GetSwipeDetails(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
