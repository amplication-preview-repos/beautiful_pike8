/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Swipe } from "./Swipe";
import { SwipeCountArgs } from "./SwipeCountArgs";
import { SwipeFindManyArgs } from "./SwipeFindManyArgs";
import { SwipeFindUniqueArgs } from "./SwipeFindUniqueArgs";
import { CreateSwipeArgs } from "./CreateSwipeArgs";
import { UpdateSwipeArgs } from "./UpdateSwipeArgs";
import { DeleteSwipeArgs } from "./DeleteSwipeArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { SwipeService } from "../swipe.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Swipe)
export class SwipeResolverBase {
  constructor(
    protected readonly service: SwipeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "read",
    possession: "any",
  })
  async _swipesMeta(
    @graphql.Args() args: SwipeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Swipe])
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "read",
    possession: "any",
  })
  async swipes(@graphql.Args() args: SwipeFindManyArgs): Promise<Swipe[]> {
    return this.service.swipes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Swipe, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "read",
    possession: "own",
  })
  async swipe(
    @graphql.Args() args: SwipeFindUniqueArgs
  ): Promise<Swipe | null> {
    const result = await this.service.swipe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Swipe)
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "create",
    possession: "any",
  })
  async createSwipe(@graphql.Args() args: CreateSwipeArgs): Promise<Swipe> {
    return await this.service.createSwipe({
      ...args,
      data: {
        ...args.data,

        userProfile: args.data.userProfile
          ? {
              connect: args.data.userProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Swipe)
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "update",
    possession: "any",
  })
  async updateSwipe(
    @graphql.Args() args: UpdateSwipeArgs
  ): Promise<Swipe | null> {
    try {
      return await this.service.updateSwipe({
        ...args,
        data: {
          ...args.data,

          userProfile: args.data.userProfile
            ? {
                connect: args.data.userProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Swipe)
  @nestAccessControl.UseRoles({
    resource: "Swipe",
    action: "delete",
    possession: "any",
  })
  async deleteSwipe(
    @graphql.Args() args: DeleteSwipeArgs
  ): Promise<Swipe | null> {
    try {
      return await this.service.deleteSwipe(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfile",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfile(
    @graphql.Parent() parent: Swipe
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async GetSwipeDetails(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetSwipeDetails(args);
  }
}
